# -*- coding: utf-8 -*-
"""AFprojectPokemon.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1urrY6x9L91zlZkPEAVcZcFQk8nNKiw00

#ProjectPokemon

##Mission

* Дано: есть план А
* Найти:

1.   собрать команду по параметрам плана А
2.   собрать таблицы для разработки плана Б
3.   разработать универсальный модуль для сбoра компанды

* Команда для плана А:
  * соcтоит из 5 Pokemon, где должен быть
  * Pokemon Flying с HP или Attack больше 70
  * Pokemon Water с Speed больше 110
  * Pokemon c Total > 720

* Для разработки плана Б необходимы данные:
1. показатель Attack топ 5  и в промежутке от 50 до 70
2. найти средний HP по Type1
3. соотношениe Generation и Legendary
4. сводные данные по Type1 и Generation (Attack и HP)

  *решаюший фактор соотношение сил

#Data

site: https://www.kaggle.com/datasets/abcsds/pokemon
ID for each pokemon Name: Name of each pokemon Type1: Each pokemon has a type, this determines weakness/resistance to attacks Type2: Some pokemon are dual type and have 2 Total: sum of all stats that come after this, a general guide to how strong a pokemon is HP: hit points, or health, defines how much damage a pokemon can withstand before fainting Attack: the base modifier for normal attacks (eg. Scratch, Punch) Defense: the base damage resistance against normal attacks SP Atk: special attack, the base modifier for special attacks (e.g. fire blast, bubble beam) SP Def: the base damage resistance against special attacks Speed: determines which pokemon attacks first each round

#Analytics
"""

import pandas as pd
import numpy as np

df = pd.read_csv('/Pokemon Dataset.csv', sep = ',')

df.head()

df.info()

df.isna().sum()

df.dropna(subset=['Type2']).shape

"""#Statistics"""

df.describe()

"""#Research

##group
"""

df.groupby('Type1')['HP'].mean()

df.groupby('Generation').Legendary.value_counts()

"""##team configuration"""

df['Test_FlyingHP'] = np.where((df['Type1'] == 'Flying') & (df['HP'] >70 ), 1, 0)
df[df.Test_FlyingHP == 1]

df['Test_FlyingA'] = np.where((df['Type1'] == 'Flying') & (df['Attack'] >70 ), 1, 0)
df[df.Test_FlyingA == 1]

df['Test_WaterS'] = np.where((df['Type1'] == 'Water') & (df['Speed'] >110 ), 1, 0)
df[df.Test_WaterS== 1]

df['Team_V'] = df['Total'].apply(lambda x: 1 if x >= 720 else 0)
df[df.Team_V == 1]

"""##sort_plan for attack"""

df.sort_values(by=['Attack']).head(5)

df.sort_values(by=['Attack']).tail(5)

df[df['Attack'].isin(range(50,70))].head()

df[df['Attack'].isin(range(50,70))].shape

"""##catalog of types"""

df[df['Type1'].isin(['Flying', 'Psychic'])].shape

df.Type1.value_counts()

df.Type2.value_counts()

df.Legendary.value_counts()

df.groupby('Type1').Type2.value_counts()

"""#pivot_table"""

table1 = pd.pivot_table(df, values='HP', index=['Type1'], columns=['Generation'], aggfunc=np.mean)
table1

table2 = pd.pivot_table(df, values='Attack', index=['Type1'], columns=['Generation'], aggfunc=np.mean)
table2

table3 = pd.pivot_table(df, values='HP', index=['Legendary'], columns=['Generation'], aggfunc=np.mean)
table3

table4 = pd.pivot_table(df, values='Attack', index=['Legendary'], columns=['Generation'], aggfunc=np.mean)
table4

"""#Visualizations

Total vs Type
"""

import matplotlib.pyplot as plt

plt.scatter(df.Total, df.Type1, color='g', alpha=0.4)
plt.title('Total vs Type')
plt.xlabel('Total')

"""Generation"""

fig, ax = plt.subplots(2,2, figsize=(10,6))

ax[0][0].bar(df.Generation, df.Attack)
ax[0][1].bar(df.Generation, df.HP)
ax[1][0].bar(df.Generation, df.Speed)
ax[1][1].bar(df.Generation, df.Total)

ax[0][0].set_title('Attack')
ax[0][1].set_title('HP')
ax[1][0].set_title('Speed')
ax[1][1].set_title('Total')

"""HP vs Attack"""

plt.scatter(df.HP,
            df.Attack,
            s=df.Total,
            cmap="Accent",
            alpha=0.6,
            edgecolors="white",
            linewidth=1)
plt.title('HP vs Attack')
plt.xlabel('HP')
plt.ylabel('Attack')

import seaborn as sns

"""Attack"""

pivot = df.pivot_table(index=['Type1'], columns=['Generation'], values='Attack', aggfunc=np.mean)
sns.heatmap(pivot)
plt.title('Attack')
plt.xlabel('Generation')

"""HP"""

pivot = df.pivot_table(index=['Type1'], columns=['Generation'], values='HP', aggfunc=np.mean)
sns.heatmap(pivot)
plt.title('HP')
plt.xlabel('Generation')

import plotly.express as px

px.scatter(df, x='Total', y='Type1', animation_frame='Generation',
           size='HP', color='Type2', hover_name='Name',
           log_x=True, size_max=45)

px.scatter(df, x='Attack', y='Type1', animation_frame='Generation',
           size='Total', color='Type2', hover_name='Name',
           log_x=True, size_max=15, facet_col='Legendary')

"""#Search pokemon"""

df['team_pokemonA'] = np.where((df['Name'] == 'TornadusIncarnate Forme') |
         (df['Name'] == 'Noivern') |
         (df['Name'] == 'Greninja') |
         (df['Name'] == 'MewtwoMega Mewtwo Y') |
         (df['Name'] == 'RayquazaMega Rayquaza'), 1, 0)
df[df.team_pokemonA == 1]

search_HP = int(input('minHP:'))
search_Attack = int(input('minAttack:'))
search_Speed = int(input('minSpeed:'))
df['search_pokemon'] = np.where((df['HP'] >= search_HP) &
         (df['Attack'] >= search_Attack) &
         (df['Speed'] >= search_Speed), 1, 0)
df[df.search_pokemon == 1]

"""#Team"""

search_1 = str(input('name1:'))
search_2 = str(input('name2:'))
search_3 = str(input('name3:'))
search_4 = str(input('name4:'))
search_5 = str(input('name5:'))
df['team_pokemon'] = np.where((df['Name'] == search_1) |
         (df['Name'] == search_2) |
         (df['Name'] == search_3) |
         (df['Name'] == search_4) |
         (df['Name'] == search_5), 1, 0)
df[df.team_pokemon == 1]

"""#Conclusions

Mission completed successfully

1.   Собрана команда плана А
2.   Собраны таблицы для плана Б
3.   Работает модуль для сбора компанды

* Команда плана А:
  * TornadusIncarnate Forme
  * Noivern
  * Greninja
  * MewtwoMega Mewtwo Y
  * RayquazaMega Rayquaza

ТЗ: Вполнено

Данные должны быть обработаны.
Необходимо сделать следующие манипуляции:
+(удалены, но не сохранены, поскольку это искажает дальшее исследование)
выяснить, есть ли пропуски и, если да - обработать их (например, удалить или заполнить каким-то значением);

+
отфильтровать часть данных по каким-то условиям (которые вам кажутся наиболее уместными);

+
создать новый столбец (или несколько) с применением метода apply и созданной Вами функции.


Проанализируйте данные:

+
найдите описательные статистики для данных;

+
попробуйте найти какие-то показатели (например, среднее, минимум или максимум) с группировкой: попробуйте найти интересные зависимости;

+
постройте сводную таблицу.


Визуализируйте полученный(-е) результат(-ы):

+
Ваша задача – построить красивые и интересные визуализации. Постройте хотя бы 3 разных визуализации. Можно использовать идеи из галереи библиотеки matplotlib, seaborn.
"""